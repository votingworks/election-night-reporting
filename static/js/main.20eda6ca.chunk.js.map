{"version":3,"sources":["utils/IntlDateTimeFormats.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["localeLongDateAndTime","Intl","DateTimeFormat","weekday","month","day","year","hour","minute","second","timeZoneName","localeDate","pluralize","addSingularRule","Screen","styled","div","Nav","nav","Main","main","MainChild","Masthead","Title","h1","LastUpdated","Search","input","SearchBar","label","LocalityName","strong","LocalitySummary","percent","hue","App","useState","report","localities","setLocalities","filter","setFilter","electionDate","format","Date","election","date","lastUpdated","lastModifiedDate","length","name","type","placeholder","onChange","event","value","currentTarget","newLocalities","l","match","RegExp","map","locality","key","id","Math","floor","random","ballotsCounted","ballotsExpected","data-percent-label","toFixed","toLocaleString","onClick","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20eda6ca.chunk.js","sourcesContent":["export const localeLongDateAndTime = new Intl.DateTimeFormat('en', {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n})\n\nexport const localeWeedkayAndDate = new Intl.DateTimeFormat('en', {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n\nexport const localeDate = new Intl.DateTimeFormat('en', {\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport pluralize from 'pluralize'\n\nimport { localeDate, localeLongDateAndTime } from './utils/IntlDateTimeFormats'\n\nimport report from './data/virgina-report.json'\n\npluralize.addSingularRule('localities', 'locality')\n\nconst Screen = styled.div`\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`\nconst Nav = styled.nav`\n  padding: 1rem;\n  background: #3e4e6d;\n  color: #ffffff;\n`\nconst Main = styled.main`\n  display: flex;\n  overflow: auto;\n  flex-direction: column;\n`\nconst MainChild = styled.div`\n  margin: 1rem;\n`\n\nconst Masthead = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n`\nconst Title = styled.h1`\n  margin: 0;\n`\nconst LastUpdated = styled.div`\n  font-size: 0.8rem;\n`\nconst Search = styled.input`\n  width: 15rem;\n  padding: 0.25rem;\n`\nconst SearchBar = styled.label`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n`\n\nconst LocalityName = styled.strong`\n  font-size: 1.2rem;\n`\n\ninterface LocalitySummaryProps {\n  percent: number\n  hue: number\n}\nconst LocalitySummary = styled.div<LocalitySummaryProps>`\n  position: relative;\n  margin-bottom: 1.5rem;\n  &::before {\n    position: absolute;\n    z-index: -1;\n    bottom: 0;\n    left: 0;\n    display: block;\n    padding: 0.1rem;\n    content: attr(data-percent-label);\n    font-size: 0.6rem;\n    font-weight: 600;\n  }\n  &::after {\n    display: block;\n    overflow: hidden;\n    width: ${({ percent }) => `${percent * 100}%`};\n    padding: 0.1rem;\n    background: hsl(${({ hue }) => hue} 49% 44% / 1);\n    color: #ffffff;\n    content: attr(data-percent-label);\n    font-size: 0.6rem;\n    font-weight: 600;\n    text-align: right;\n  }\n  p {\n    margin: 0 0 0.1rem;\n  }\n`\n\nconst App: React.FunctionComponent = () => {\n  const [localities, setLocalities] = useState(report.localities)\n  const [filter, setFilter] = useState('')\n  const filterLocalities = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget\n    const newLocalities = report.localities.filter((l) =>\n      l.name.match(new RegExp(value, 'gi'))\n    )\n    setFilter(value)\n    setLocalities(newLocalities)\n  }\n  const clearFilter = () => {\n    setFilter('')\n    setLocalities(report.localities)\n  }\n  const electionDate = localeDate.format(new Date(report.election.date))\n  const lastUpdated = localeLongDateAndTime.format(\n    new Date(report.lastModifiedDate)\n  )\n\n  return (\n    <Screen>\n      <Nav>\n        <Masthead>\n          <Title>Virginia Locality Reporting</Title>\n          <LastUpdated>Last updated: {lastUpdated}</LastUpdated>\n        </Masthead>\n        <SearchBar>\n          {filter ? (\n            <div>\n              Showing {pluralize('locality', localities.length, true)} matching\n              “{filter}” for {electionDate} {report.election.name}\n            </div>\n          ) : (\n            <div>\n              Showing all {pluralize('locality', localities.length, true)} for{' '}\n              {electionDate} {report.election.name}\n            </div>\n          )}\n          <Search\n            type=\"search\"\n            placeholder=\"search by county name\"\n            onChange={filterLocalities}\n          />\n        </SearchBar>\n      </Nav>\n      <Main>\n        <MainChild>\n          {localities.map((locality) => (\n            <LocalitySummary\n              key={locality.id}\n              hue={Math.floor(Math.random() * 360) + 1}\n              percent={locality.ballotsCounted / locality.ballotsExpected}\n              data-percent-label={`${(\n                (locality.ballotsCounted / locality.ballotsExpected) *\n                100\n              ).toFixed(2)}%`}\n            >\n              <p>\n                <LocalityName>{locality.name}</LocalityName> has counted{' '}\n                {locality.ballotsCounted.toLocaleString('en')} of{' '}\n                {locality.ballotsExpected.toLocaleString('en')} expected\n                ballots.\n              </p>\n            </LocalitySummary>\n          ))}\n          {localities.length === 0 && (\n            <button type=\"button\" onClick={clearFilter}>\n              Show all\n            </button>\n          )}\n        </MainChild>\n      </Main>\n    </Screen>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}