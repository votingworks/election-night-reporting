{"version":3,"sources":["utils/IntlDateTimeFormats.ts","components/map.tsx","App.tsx","utils/shuffle.ts","serviceWorker.ts","index.tsx"],"names":["localeLongDateAndTime","Intl","DateTimeFormat","weekday","month","day","year","hour","minute","second","timeZoneName","localeDate","styles","width","height","position","MapboxGLMap","useState","map","setMap","mapContainer","useRef","useEffect","mapboxgl","accessToken","setMapFunction","mapRef","newMap","Map","container","current","style","center","zoom","on","resize","addControl","NavigationControl","initializeMap","ref","pluralize","addSingularRule","Screen","styled","div","Navivation","Main","main","navigationHeight","MainChild","Masthead","TabNav","nav","Title","h1","LastUpdated","SearchBar","label","SearchSummary","SearchInput","input","LocalityName","strong","LocalitySummary","isTotal","undefined","CompletedBar","randomHues","a","i","length","j","Math","floor","random","shuffle","report","localities","_","array","localityColors","reduce","result","locality","id","sortOptions","ignorePunctuation","numeric","App","windowWidth","useWindowWidth","setNavigationHeight","currentPage","setCurrentPage","localityFilter","setLocalityFilter","reportTotal","ballotsCounted","ballotsExpected","name","localitiesByName","sort","b","localeCompare","filteredLocalities","filter","match","RegExp","electionDate","format","Date","election","date","lastUpdated","document","getElementById","getBoundingClientRect","type","className","onClick","placeholder","maxLength","onChange","event","currentTarget","value","isMap","percentComplete","key","toLocaleString","toFixed","backgroundColor","visibility","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4911871.chunk.js","sourcesContent":["export const localeLongDateAndTime = new Intl.DateTimeFormat('en', {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n})\n\nexport const localeWeedkayAndDate = new Intl.DateTimeFormat('en', {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n\nexport const localeDate = new Intl.DateTimeFormat('en', {\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n","import React, { useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst styles: React.CSSProperties = {\n  width: '100vw',\n  height: 'calc(100vh - 80px)',\n  position: 'absolute',\n}\n\nconst MapboxGLMap: React.FunctionComponent = () => {\n  const [map, setMap] = useState(null)\n  const mapContainer = useRef(null)\n\n  useEffect(() => {\n    mapboxgl.accessToken =\n      'pk.eyJ1IjoidnhtYXR0IiwiYSI6ImNrZXlqanVsZjE2dTcyeWw5MXo2MGl2bXkifQ.aYJ7caybvE-W8NGle4p0-w'\n    // mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY\n    const initializeMap = ({\n      setMapFunction,\n      mapRef,\n    }: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      setMapFunction: any\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      mapRef: any\n    }) => {\n      const newMap = new mapboxgl.Map({\n        container: mapRef.current,\n        style: 'mapbox://styles/vxmatt/ckeymjssl073319o1uc1j0dga', // stylesheet location\n        center: [-78.6569, 37.4316],\n        zoom: 6,\n      })\n\n      newMap.on('load', () => {\n        setMapFunction(newMap)\n        newMap.resize()\n        newMap.addControl(new mapboxgl.NavigationControl())\n      })\n    }\n\n    if (!map) initializeMap({ setMapFunction: setMap, mapRef: mapContainer })\n  }, [map])\n\n  return <div ref={mapContainer} style={styles} />\n}\n\nexport default MapboxGLMap\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport pluralize from 'pluralize'\nimport { useWindowWidth } from '@react-hook/window-size'\n\nimport { localeDate, localeLongDateAndTime } from './utils/IntlDateTimeFormats'\n\nimport report from './data/virgina-report.json'\nimport { Dictionary } from './types'\nimport shuffle from './utils/shuffle'\nimport MapboxGLMap from './components/map'\n\npluralize.addSingularRule('localities', 'locality')\n\nconst Screen = styled.div``\nconst Navivation = styled.div`\n  position: fixed;\n  z-index: 100;\n  top: 0;\n  right: 0;\n  left: 0;\n  background: #3e4e6d;\n`\nconst Main = styled.main<{ navigationHeight: number; isMap: boolean }>`\n  padding-top: ${({ navigationHeight }) =>\n    navigationHeight ? `${navigationHeight}px` : '150px'};\n`\nconst MainChild = styled.div`\n  padding: 1rem;\n`\nconst Masthead = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.5rem;\n  color: #ffffff;\n  @media (min-width: 767px) {\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 1rem;\n  }\n`\nconst TabNav = styled.nav`\n  display: flex;\n  padding: 0 0.5rem;\n  border-bottom: 1px solid #ffffff;\n  @media (min-width: 767px) {\n    flex-direction: row;\n    padding: 0 1rem;\n  }\n  button {\n    display: inline-block;\n    min-width: 7rem;\n    box-sizing: border-box;\n    flex: 1;\n    padding: 0.5rem 1rem;\n    border: none;\n    margin: 0 0.25rem;\n    background: #8798ba;\n    border-radius: 0.25rem 0.25rem 0 0;\n    font-size: inherit;\n    &:first-child {\n      margin-left: 0;\n    }\n    &:last-child {\n      margin-right: 0;\n    }\n    &.active {\n      background: #ffffff;\n    }\n    @media (min-width: 767px) {\n      flex: 0;\n      margin: 0 0.25rem;\n    }\n  }\n`\nconst Title = styled.h1`\n  flex-grow: 1;\n  margin: 0;\n`\nconst LastUpdated = styled.div`\n  flex-shrink: 3;\n  margin-top: 0.25em;\n  font-size: 0.8rem;\n  @media (min-width: 767px) {\n    margin-top: 0;\n  }\n`\nconst SearchBar = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0.25rem 0.5rem;\n  border-bottom: 1px solid #cccccc;\n  background: #ffffff;\n  @media (min-width: 767px) {\n    flex-direction: row;\n    align-items: center;\n    padding: 0.25rem 1rem;\n  }\n`\nconst SearchSummary = styled.div`\n  flex: 1;\n  margin: 0.5em 0;\n  @media (min-width: 767px) {\n    margin: 0 1em 0 0;\n  }\n`\nconst SearchInput = styled.input`\n  width: 100%;\n  padding: 0.25rem;\n  border: 1px solid #cccccc;\n  border-radius: 0.25rem;\n  &::placeholder {\n    color: #cccccc;\n  }\n  @media (min-width: 767px) {\n    width: 15em;\n  }\n`\n\nconst LocalityName = styled.strong`\n  font-size: 1.3rem;\n`\n\nconst LocalitySummary = styled.div<{ isTotal: boolean }>`\n  padding: ${({ isTotal }) => (isTotal ? '2rem 0.5rem' : '0.75rem 0.5rem')};\n  border-bottom: ${({ isTotal }) =>\n    isTotal ? '1px solid #cccccc' : undefined};\n  margin-bottom: ${({ isTotal }) => (isTotal ? '0.5rem' : undefined)};\n  background: ${({ isTotal }) => (isTotal ? '#eeeeee' : undefined)};\n  @media (min-width: 767px) {\n    padding: ${({ isTotal }) => (isTotal ? '2rem 1rem' : '1rem')};\n  }\n\n  p {\n    margin: 0 0 0.2rem;\n  }\n`\nconst CompletedBar = styled.div`\n  position: relative;\n  font-size: 0.8rem;\n  font-weight: 600;\n  div {\n    padding: 0 0.3rem;\n    border-radius: 2rem;\n    line-height: 1.4em;\n  }\n  div:first-child {\n    background: #dddddd;\n  }\n  div:last-child {\n    position: absolute;\n    z-index: 1;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    overflow: hidden;\n    background: #000000;\n    color: #ffffff;\n    text-align: right;\n  }\n`\n// TODO: Move color generation into report json so that localities maintain the same color.\nconst randomHues = shuffle(\n  report.localities.map((_, i, array) => 360 * ((i + 1) / array.length))\n)\nconst localityColors = report.localities.reduce<Dictionary<string>>(\n  (result, locality, i) => ({\n    ...result,\n    [locality.id]: `hsl(${randomHues[i]} 40% 40% / 1)`,\n  }),\n  {}\n)\n\nconst sortOptions = {\n  ignorePunctuation: true,\n  numeric: true,\n}\n\ninterface Locality {\n  id: string\n  name: string\n  ballotsCounted: number\n  ballotsExpected: number\n}\n\ntype SitePages = 'list' | 'map' | 'about'\n\nconst App: React.FunctionComponent = () => {\n  const windowWidth = useWindowWidth()\n  const [navigationHeight, setNavigationHeight] = useState<number>(0)\n  const [currentPage, setCurrentPage] = useState<SitePages>('list')\n  const [localityFilter, setLocalityFilter] = useState('')\n  const reportTotal = report.localities.reduce<Locality>(\n    (result, locality) => ({\n      ...result,\n      ballotsCounted: result.ballotsCounted + locality.ballotsCounted,\n      ballotsExpected: result.ballotsExpected + locality.ballotsExpected,\n    }),\n    {\n      id: 'total',\n      name: 'State of Virginia',\n      ballotsCounted: 0,\n      ballotsExpected: 0,\n    }\n  )\n  const localitiesByName = report.localities.sort((a, b) =>\n    a.name.localeCompare(b.name, undefined, sortOptions)\n  )\n  const displayLocalities = [reportTotal, ...localitiesByName]\n  const filteredLocalities = displayLocalities.filter((locality) =>\n    locality.name.match(new RegExp(localityFilter, 'gi'))\n  )\n  const electionDate = localeDate.format(new Date(report.election.date))\n  const lastUpdated = localeLongDateAndTime.format(new Date(report.lastUpdated))\n\n  useEffect(() => {\n    setNavigationHeight(\n      document.getElementById('navigation')?.getBoundingClientRect().height ?? 0\n    )\n  }, [windowWidth, localityFilter, currentPage])\n\n  return (\n    <Screen>\n      <Navivation id=\"navigation\">\n        <Masthead>\n          <Title>{report.name}</Title>\n          <LastUpdated>Last updated: {lastUpdated}</LastUpdated>\n        </Masthead>\n        <TabNav>\n          <button\n            type=\"button\"\n            className={currentPage === 'list' ? 'active' : ''}\n            onClick={() => setCurrentPage('list')}\n          >\n            List\n          </button>\n          <button\n            type=\"button\"\n            className={currentPage === 'map' ? 'active' : ''}\n            onClick={() => setCurrentPage('map')}\n          >\n            Map\n          </button>\n          <button\n            type=\"button\"\n            className={currentPage === 'about' ? 'active' : ''}\n            onClick={() => setCurrentPage('about')}\n          >\n            About\n          </button>\n        </TabNav>\n        {currentPage === 'list' && (\n          <SearchBar>\n            {localityFilter ? (\n              <SearchSummary>\n                Showing {pluralize('locality', filteredLocalities.length, true)}{' '}\n                matching “{localityFilter}” for {electionDate}{' '}\n                {report.election.name}\n              </SearchSummary>\n            ) : (\n              <SearchSummary>\n                Showing all{' '}\n                {pluralize('locality', filteredLocalities.length, true)} for{' '}\n                {electionDate} {report.election.name}\n              </SearchSummary>\n            )}\n            <SearchInput\n              type=\"text\"\n              placeholder=\"search by name\"\n              maxLength={30}\n              onChange={(event) => setLocalityFilter(event.currentTarget.value)}\n            />\n          </SearchBar>\n        )}\n      </Navivation>\n      <Main navigationHeight={navigationHeight} isMap={currentPage === 'map'}>\n        {currentPage === 'about' ? (\n          <MainChild>\n            <h1>About This App</h1>\n            <p>What does it all mean?</p>\n            <p>Where is my spoon?</p>\n          </MainChild>\n        ) : currentPage === 'map' ? (\n          <div>\n            <MapboxGLMap />\n          </div>\n        ) : (\n          <>\n            {filteredLocalities.map((locality) => {\n              const percentComplete =\n                (locality.ballotsCounted / locality.ballotsExpected) * 100\n\n              return (\n                <LocalitySummary\n                  key={locality.id}\n                  isTotal={locality.id === 'total'}\n                >\n                  <p>\n                    <LocalityName>{locality.name}</LocalityName> has counted{' '}\n                    {locality.ballotsCounted.toLocaleString('en')} of{' '}\n                    {locality.ballotsExpected.toLocaleString('en')} expected\n                    ballots\n                    {locality.id === 'total' && <strong> in total</strong>}.\n                  </p>\n                  <CompletedBar>\n                    <div>\n                      {percentComplete === 0\n                        ? '0%'\n                        : `${percentComplete.toFixed(2)}%`}\n                    </div>\n                    <div\n                      style={{\n                        width: `${percentComplete}%`,\n                        backgroundColor: localityColors[locality.id],\n                        visibility:\n                          locality.ballotsCounted === 0 ? 'hidden' : undefined,\n                      }}\n                    >\n                      {`${percentComplete.toFixed(2)}%`}\n                    </div>\n                  </CompletedBar>\n                </LocalitySummary>\n              )\n            })}\n            {filteredLocalities.length === 0 && (\n              <button type=\"button\" onClick={() => setLocalityFilter('')}>\n                Show all\n              </button>\n            )}\n          </>\n        )}\n      </Main>\n    </Screen>\n  )\n}\n\nexport default App\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nexport default function shuffle<T>(a: Array<T>): Array<T> {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[a[i], a[j]] = [a[j], a[i]]\n  }\n  return a\n}\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}