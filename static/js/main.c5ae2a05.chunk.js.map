{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["pluralize","addSingularRule","Page","styled","div","Grid","LocalityName","h3","LocalitySummary","percent","Search","input","App","useState","report","localities","setLocalities","type","placeholder","onChange","event","value","currentTarget","newLocalities","filter","l","name","match","RegExp","length","map","locality","Fragment","key","id","ballotsCounted","ballotsExpected","data-percent-label","toFixed","toLocaleString","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gtCAMAA,IAAUC,gBAAgB,aAAc,YAExC,IAAMC,EAAOC,IAAOC,IAAV,KAGJC,EAAOF,IAAOC,IAAV,KAOJE,EAAeH,IAAOI,GAAV,KAOZC,EAAkBL,IAAOC,IAAV,KAKR,gBAAGK,EAAH,EAAGA,QAAH,gBAA8B,IAAVA,EAApB,QAkBPC,EAASP,IAAOQ,MAAV,KA4CGC,EAxCsB,WAAO,IAAD,EACLC,mBAASC,EAAOC,YADX,mBAClCA,EADkC,KACtBC,EADsB,KASzC,OACE,kBAACd,EAAD,KACE,wDACA,2BACE,kBAACQ,EAAD,CAAQO,KAAK,OAAOC,YAAY,SAASC,SAXtB,SAACC,GAA8C,IAC9DC,EAAUD,EAAME,cAAhBD,MACFE,EAAgBT,EAAOC,WAAWS,QAAO,SAACC,GAAD,OAC7CA,EAAEC,KAAKC,MAAM,IAAIC,OAAOP,EAAO,UAEjCL,EAAcO,MAM8D,IAD1E,WAEWvB,IAAU,WAAYe,EAAWc,QAAQ,IAEpD,kBAACxB,EAAD,KACGU,EAAWe,KAAI,SAACC,GAAD,OACd,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAASG,IAC5B,kBAAC5B,EAAD,KAAeyB,EAASL,MACxB,kBAAClB,EAAD,CACEC,QAASsB,EAASI,eAAiBJ,EAASK,gBAC5CC,qBAAA,WACGN,EAASI,eAAiBJ,EAASK,gBACpC,KACAE,QAAQ,GAHV,MAKA,2BACGP,EAASI,eAAeI,eAAe,MAD1C,uBAEMR,EAASK,gBAAgBG,eAAe,MAF9C,6BCjEMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCdNiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c5ae2a05.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport pluralize from 'pluralize'\n\nimport report from './data/virgina-report.json'\n\npluralize.addSingularRule('localities', 'locality')\n\nconst Page = styled.div`\n  margin: 1rem;\n`\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  place-content: stretch;\n  place-items: stretch;\n  row-gap: 15px;\n`\nconst LocalityName = styled.h3`\n  margin: 0;\n`\n\ninterface LocalitySummaryProps {\n  percent: number\n}\nconst LocalitySummary = styled.div<LocalitySummaryProps>`\n  position: relative;\n  &::before {\n    display: block;\n    overflow: hidden;\n    width: ${({ percent }) => `${percent * 100}%`};\n    background: #000000;\n    color: #ffffff;\n    content: attr(data-percent-label);\n    text-align: right;\n  }\n  &::after {\n    position: absolute;\n    z-index: -1;\n    top: 0;\n    left: 0;\n    display: block;\n    content: attr(data-percent-label);\n  }\n  p {\n    margin: 0;\n  }\n`\nconst Search = styled.input`\n  border: 1px solid #38ba5f;\n`\n\nconst App: React.FunctionComponent = () => {\n  const [localities, setLocalities] = useState(report.localities)\n  const filterLocalities = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget\n    const newLocalities = report.localities.filter((l) =>\n      l.name.match(new RegExp(value, 'gi'))\n    )\n    setLocalities(newLocalities)\n  }\n  return (\n    <Page>\n      <h1>Virginia Locality Report</h1>\n      <p>\n        <Search type=\"text\" placeholder=\"filter\" onChange={filterLocalities} />{' '}\n        Showing {pluralize('locality', localities.length, true)}\n      </p>\n      <Grid>\n        {localities.map((locality) => (\n          <React.Fragment key={locality.id}>\n            <LocalityName>{locality.name}</LocalityName>\n            <LocalitySummary\n              percent={locality.ballotsCounted / locality.ballotsExpected}\n              data-percent-label={`${(\n                (locality.ballotsCounted / locality.ballotsExpected) *\n                100\n              ).toFixed(2)}%`}\n            >\n              <p>\n                {locality.ballotsCounted.toLocaleString('en')} ballots counted\n                of {locality.ballotsExpected.toLocaleString('en')} ballots\n                expected\n              </p>\n            </LocalitySummary>\n          </React.Fragment>\n        ))}\n      </Grid>\n    </Page>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}